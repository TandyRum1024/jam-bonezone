<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNPC</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render attribs
randomize();
time = 0;
image_speed = 0;
image_index = irandom_range(0, image_number - 1);

z = 0;
size = 16;
dirTowardsFocus = 0;

isHighlighted = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NPC Attributes
enum npcTYPE
{
    MISC = 0,
    LOCATE_ITEM
}
type = npcTYPE.MISC;
targetItem = noone;

// skin type
enum npcSKIN
{
    HUMANOID = 0,
    ANIMAL
}
skinType = choose(0, 1);
skinSpr1 = sprNPC;
skinSpr2 = sprNPC;
skinIdx1 = 0;
skinIdx2 = 0;

switch (skinType)
{
    default:
    case npcSKIN.HUMANOID:
        skinSpr1 = sprNpcHumanoidHead;
        skinSpr2 = sprNpcHumanoidBody;
        break;
        
    case npcSKIN.ANIMAL:
        skinSpr1 = sprNpcAnimalHead;
        skinSpr2 = sprNpcAnimalBody;
        break;
}

skinIdx1 = irandom_range(0, sprite_get_number(skinSpr1) - 1);
skinIdx2 = irandom_range(0, sprite_get_number(skinSpr2) - 1);

// build list of quips
npc_roll_quip();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time++;
dirTowardsFocus = point_direction(x, y, global.billboardFocusX, global.billboardFocusY);

if (isHighlighted &amp;&amp; oKNT_3D.quipTarget != id)
{
    isHighlighted = false;
}

if (!instance_exists(targetItem))
{
    targetItem = noone;
    npc_roll_quip();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Adjust height if needed
z = noise2D(global.seedval + x, global.seedval + y) * 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prep draw
d3d_transform_stack_push();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render sprite/billboards
var _vb = global.floorVB;
var _rx = -lengthdir_x(0.5, dirTowardsFocus);
var _ry = -lengthdir_y(0.5, dirTowardsFocus);

d3d_transform_add_rotation_x(90);
d3d_transform_add_rotation_z(dirTowardsFocus + 90);
d3d_transform_add_translation(0, 0, 0.5);
d3d_transform_add_scaling(size, size, size);

d3d_transform_add_translation(x, y, z);
vertex_submit(_vb, pr_trianglelist, sprite_get_texture(skinSpr1, skinIdx1));

d3d_transform_add_translation(_rx, _ry, 0);
vertex_submit(_vb, pr_trianglelist, sprite_get_texture(skinSpr2, skinIdx2));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw arrow if highlighted
if (isHighlighted)
{
    d3d_transform_stack_pop();
    d3d_transform_stack_push();
    d3d_transform_add_rotation_x(90);
    d3d_transform_add_rotation_z(dirTowardsFocus + 90);
    d3d_transform_add_translation(0, 0, 0.5);
    d3d_transform_add_scaling(16, 16, 9);
    d3d_transform_add_translation(x, y, z + size + dsin(time * 2));
    
    vertex_submit(_vb, pr_trianglelist, sprite_get_texture(sprThisone, 0));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End draw
d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
